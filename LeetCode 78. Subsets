class Solution(object):
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        res = []
        def dfs(index,path):
            # add result for every iteration
            res.append(path)
            
            #dfs
            for i in range(index,len(nums)):
                dfs(i+1,path+[nums[i]])
        dfs(0,[]) 
        return res
"""
nums = [1,2,3]

tree
    [ 1,  2, 3]
      /\  |
     2  3 3
    /
   3
dfs(0,[]) : path=[] res=[[]], dfs(1,[1]) dfs(2,[2]) dfs(3,[3])
dfs(1,[1]): path=[1] res=[[],[1]] dfs(2,[1,2]) dfs(3,[1,3])
dfs(2,[1,2]): path=[1,2] res=[[],[1],[1,2]] dfs(3,[1,2,3])
dfs(3,[1,2,3]): path=[1,2,3] res=[[],[1],[1,2],[1,2,3]] >> quit
dfs(3,[1,3]): path=[1,3] res=[[],[1],[1,2],[1,2,3],[1,3]] >> quit

dfs(2,[2]): path=[2] res=[[],[1],[1,2],[1,2,3],[1,3],[2]] dfs(3,[2,3])
dfs(3,[2,3]): path=[2,3] res=[[],[1],[1,2],[1,2,3],[1,3],[2],[2,3]]  >> quit

dfs(3,[3]): path=[3] res=[[],[1],[1,2],[1,2,3],[1,3],[2],[2,3],[3]]  >> quit
"""
    
